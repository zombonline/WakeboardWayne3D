using System.Collections;
using System.Collections.Generic;
using UnityEngine;


//This script will be attached to the balls generated by the barrier script.
//It is used to move the balls backwards at the same speed as obstacles in the world and also bob up and down randomly.
public class BarrierBall : MonoBehaviour
{
    Barrier barrier; //reference to parent Barrier script
    float targetHeight; //TargetHheight used for bobbing up and down
    [SerializeField] float floatSpeed; //Speed at which ball will bob up and down
    [SerializeField] float minHeight, maxHeight; //range of bobbing up and down
    private void Start()
    {
        barrier = transform.parent.GetComponent<Barrier>(); //assign barrier parent component
        targetHeight = Random.Range(minHeight, maxHeight); //assign first randomheight

    }

    private void Update()
    {
        MoveZ();
        MoveY();
    }

    private void MoveY()
    {
        if (System.Math.Round(transform.localPosition.y, 3) != System.Math.Round(targetHeight, 3)) // if current height does not match current target height
        {
            transform.localPosition = Vector3.MoveTowards(transform.localPosition, new Vector3(transform.localPosition.x, targetHeight, transform.localPosition.z), floatSpeed * Time.deltaTime); //move towards target height.
        }
        else // current height matches current target height
        {
            if (targetHeight != minHeight) //if ball not at minimum position
            {
                targetHeight = minHeight; //set target height to minimum position
            }
            else //or if ball is at minimum position
            {
                targetHeight = Random.Range(minHeight, maxHeight); //set target height to random value between range
            }
        }
    }

    private void MoveZ()
    {
        transform.localPosition += transform.forward * barrier.ballSpeed * Time.deltaTime; //Keep moving back at same speed as obstacles
        if (transform.localPosition.z > barrier.sphereAmount * 5) //if end of line reached.
        {
            transform.localPosition = new Vector3(transform.localPosition.x, transform.localPosition.y, 0f); //reset position back to start of line
            barrier.ReplaceFirstListElement(transform); //reset ball position in 'Barrier' script list to ensure line renderer does not overlap.
        }
    }
}
